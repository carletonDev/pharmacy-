/*
 * This file is generated by jOOQ.
 */
package Pharmacy.dbo.tables.records;


import Pharmacy.dbo.tables.Medicine;
import Pharmacy.dbo.tables.interfaces.IMedicine;

import java.math.BigDecimal;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "Medicine", schema = "dbo", uniqueConstraints = {
    @UniqueConstraint(name = "PK_Medicine", columnNames = {"medicineId"})
})
public class MedicineRecord extends UpdatableRecordImpl<MedicineRecord> implements Record3<Object, BigDecimal, String>, IMedicine {

    private static final long serialVersionUID = 425592487;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public void setMedicineid(Object value) {
        set(0, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Id
    @Column(name = "medicineId")
    @Override
    public Object getMedicineid() {
        return get(0);
    }

    /**
     * Setter for <code>dbo.Medicine.cost</code>.
     */
    @Override
    public void setCost(BigDecimal value) {
        set(1, value);
    }

    /**
     * Getter for <code>dbo.Medicine.cost</code>.
     */
    @Column(name = "cost", precision = 10, scale = 2)
    @Override
    public BigDecimal getCost() {
        return (BigDecimal) get(1);
    }

    /**
     * Setter for <code>dbo.Medicine.medicineName</code>.
     */
    @Override
    public void setMedicinename(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>dbo.Medicine.medicineName</code>.
     */
    @Column(name = "medicineName", length = 50)
    @Override
    public String getMedicinename() {
        return (String) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Object> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Object, BigDecimal, String> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field1() {
        return Medicine.MEDICINE.MEDICINEID;
    }

    @Override
    public Field<BigDecimal> field2() {
        return Medicine.MEDICINE.COST;
    }

    @Override
    public Field<String> field3() {
        return Medicine.MEDICINE.MEDICINENAME;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component1() {
        return getMedicineid();
    }

    @Override
    public BigDecimal component2() {
        return getCost();
    }

    @Override
    public String component3() {
        return getMedicinename();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value1() {
        return getMedicineid();
    }

    @Override
    public BigDecimal value2() {
        return getCost();
    }

    @Override
    public String value3() {
        return getMedicinename();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public MedicineRecord value1(Object value) {
        setMedicineid(value);
        return this;
    }

    @Override
    public MedicineRecord value2(BigDecimal value) {
        setCost(value);
        return this;
    }

    @Override
    public MedicineRecord value3(String value) {
        setMedicinename(value);
        return this;
    }

    @Override
    public MedicineRecord values(Object value1, BigDecimal value2, String value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IMedicine from) {
        setMedicineid(from.getMedicineid());
        setCost(from.getCost());
        setMedicinename(from.getMedicinename());
    }

    @Override
    public <E extends IMedicine> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached MedicineRecord
     */
    public MedicineRecord() {
        super(Medicine.MEDICINE);
    }

    /**
     * Create a detached, initialised MedicineRecord
     */
    public MedicineRecord(Object medicineid, BigDecimal cost, String medicinename) {
        super(Medicine.MEDICINE);

        set(0, medicineid);
        set(1, cost);
        set(2, medicinename);
    }
}
