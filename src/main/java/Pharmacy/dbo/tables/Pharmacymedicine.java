/*
 * This file is generated by jOOQ.
 */
package Pharmacy.dbo.tables;


import Pharmacy.dbo.Dbo;
import Pharmacy.dbo.Keys;
import Pharmacy.dbo.tables.records.PharmacymedicineRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pharmacymedicine extends TableImpl<PharmacymedicineRecord> {

    private static final long serialVersionUID = -903654902;

    /**
     * The reference instance of <code>dbo.PharmacyMedicine</code>
     */
    public static final Pharmacymedicine PHARMACYMEDICINE = new Pharmacymedicine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PharmacymedicineRecord> getRecordType() {
        return PharmacymedicineRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacymedicineRecord, Object> PMID = createField(DSL.name("pmid"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacymedicineRecord, Object> INSTOCK = createField(DSL.name("inStock"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacymedicineRecord, Object> MEDICINEID = createField(DSL.name("medicineId"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacymedicineRecord, Object> PHARMACYID = createField(DSL.name("pharmacyId"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>dbo.PharmacyMedicine</code> table reference
     */
    public Pharmacymedicine() {
        this(DSL.name("PharmacyMedicine"), null);
    }

    /**
     * Create an aliased <code>dbo.PharmacyMedicine</code> table reference
     */
    public Pharmacymedicine(String alias) {
        this(DSL.name(alias), PHARMACYMEDICINE);
    }

    /**
     * Create an aliased <code>dbo.PharmacyMedicine</code> table reference
     */
    public Pharmacymedicine(Name alias) {
        this(alias, PHARMACYMEDICINE);
    }

    private Pharmacymedicine(Name alias, Table<PharmacymedicineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pharmacymedicine(Name alias, Table<PharmacymedicineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pharmacymedicine(Table<O> child, ForeignKey<O, PharmacymedicineRecord> key) {
        super(child, key, PHARMACYMEDICINE);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public UniqueKey<PharmacymedicineRecord> getPrimaryKey() {
        return Keys.PK_PHARMACYMEDICINE;
    }

    @Override
    public List<UniqueKey<PharmacymedicineRecord>> getKeys() {
        return Arrays.<UniqueKey<PharmacymedicineRecord>>asList(Keys.PK_PHARMACYMEDICINE);
    }

    @Override
    public Pharmacymedicine as(String alias) {
        return new Pharmacymedicine(DSL.name(alias), this);
    }

    @Override
    public Pharmacymedicine as(Name alias) {
        return new Pharmacymedicine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pharmacymedicine rename(String name) {
        return new Pharmacymedicine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pharmacymedicine rename(Name name) {
        return new Pharmacymedicine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Object, Object, Object, Object> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
