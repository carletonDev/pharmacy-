/*
 * This file is generated by jOOQ.
 */
package Pharmacy.dbo.tables;


import Pharmacy.dbo.Dbo;
import Pharmacy.dbo.Keys;
import Pharmacy.dbo.tables.records.MedicineRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Medicine extends TableImpl<MedicineRecord> {

    private static final long serialVersionUID = 861094879;

    /**
     * The reference instance of <code>dbo.Medicine</code>
     */
    public static final Medicine MEDICINE = new Medicine();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicineRecord> getRecordType() {
        return MedicineRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<MedicineRecord, Object> MEDICINEID = createField(DSL.name("medicineId"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>dbo.Medicine.cost</code>.
     */
    public final TableField<MedicineRecord, BigDecimal> COST = createField(DSL.name("cost"), org.jooq.impl.SQLDataType.NUMERIC(10, 2).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NUMERIC)), this, "");

    /**
     * The column <code>dbo.Medicine.medicineName</code>.
     */
    public final TableField<MedicineRecord, String> MEDICINENAME = createField(DSL.name("medicineName"), org.jooq.impl.SQLDataType.NVARCHAR(50).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * Create a <code>dbo.Medicine</code> table reference
     */
    public Medicine() {
        this(DSL.name("Medicine"), null);
    }

    /**
     * Create an aliased <code>dbo.Medicine</code> table reference
     */
    public Medicine(String alias) {
        this(DSL.name(alias), MEDICINE);
    }

    /**
     * Create an aliased <code>dbo.Medicine</code> table reference
     */
    public Medicine(Name alias) {
        this(alias, MEDICINE);
    }

    private Medicine(Name alias, Table<MedicineRecord> aliased) {
        this(alias, aliased, null);
    }

    private Medicine(Name alias, Table<MedicineRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Medicine(Table<O> child, ForeignKey<O, MedicineRecord> key) {
        super(child, key, MEDICINE);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public UniqueKey<MedicineRecord> getPrimaryKey() {
        return Keys.PK_MEDICINE;
    }

    @Override
    public List<UniqueKey<MedicineRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicineRecord>>asList(Keys.PK_MEDICINE);
    }

    @Override
    public Medicine as(String alias) {
        return new Medicine(DSL.name(alias), this);
    }

    @Override
    public Medicine as(Name alias) {
        return new Medicine(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Medicine rename(String name) {
        return new Medicine(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Medicine rename(Name name) {
        return new Medicine(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Object, BigDecimal, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
