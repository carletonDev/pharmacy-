/*
 * This file is generated by jOOQ.
 */
package Pharmacy.dbo.tables;


import Pharmacy.dbo.Dbo;
import Pharmacy.dbo.Keys;
import Pharmacy.dbo.tables.records.PharmacyRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pharmacy extends TableImpl<PharmacyRecord> {

    private static final long serialVersionUID = 1017785508;

    /**
     * The reference instance of <code>dbo.Pharmacy</code>
     */
    public static final Pharmacy PHARMACY = new Pharmacy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PharmacyRecord> getRecordType() {
        return PharmacyRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacyRecord, Object> PHARMACYID = createField(DSL.name("pharmacyId"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>dbo.Pharmacy.city</code>.
     */
    public final TableField<PharmacyRecord, String> CITY = createField(DSL.name("city"), org.jooq.impl.SQLDataType.NVARCHAR(50).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Pharmacy.pharmacyAddress</code>.
     */
    public final TableField<PharmacyRecord, String> PHARMACYADDRESS = createField(DSL.name("pharmacyAddress"), org.jooq.impl.SQLDataType.NVARCHAR(50).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Pharmacy.state</code>.
     */
    public final TableField<PharmacyRecord, String> STATE = createField(DSL.name("state"), org.jooq.impl.SQLDataType.NVARCHAR(30).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<PharmacyRecord, Object> ZIP = createField(DSL.name("zip"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * Create a <code>dbo.Pharmacy</code> table reference
     */
    public Pharmacy() {
        this(DSL.name("Pharmacy"), null);
    }

    /**
     * Create an aliased <code>dbo.Pharmacy</code> table reference
     */
    public Pharmacy(String alias) {
        this(DSL.name(alias), PHARMACY);
    }

    /**
     * Create an aliased <code>dbo.Pharmacy</code> table reference
     */
    public Pharmacy(Name alias) {
        this(alias, PHARMACY);
    }

    private Pharmacy(Name alias, Table<PharmacyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pharmacy(Name alias, Table<PharmacyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Pharmacy(Table<O> child, ForeignKey<O, PharmacyRecord> key) {
        super(child, key, PHARMACY);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public UniqueKey<PharmacyRecord> getPrimaryKey() {
        return Keys.PK_PHARMACY;
    }

    @Override
    public List<UniqueKey<PharmacyRecord>> getKeys() {
        return Arrays.<UniqueKey<PharmacyRecord>>asList(Keys.PK_PHARMACY);
    }

    @Override
    public Pharmacy as(String alias) {
        return new Pharmacy(DSL.name(alias), this);
    }

    @Override
    public Pharmacy as(Name alias) {
        return new Pharmacy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pharmacy rename(String name) {
        return new Pharmacy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pharmacy rename(Name name) {
        return new Pharmacy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Object, String, String, String, Object> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
