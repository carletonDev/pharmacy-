/*
 * This file is generated by jOOQ.
 */
package PharmacyDataAccess.tables;


import PharmacyDataAccess.Dbo;
import PharmacyDataAccess.Keys;
import PharmacyDataAccess.tables.records.EmployeeRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Employee extends TableImpl<EmployeeRecord> {

    private static final long serialVersionUID = -653301417;

    /**
     * The reference instance of <code>dbo.Employee</code>
     */
    public static final Employee EMPLOYEE = new Employee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EmployeeRecord> getRecordType() {
        return EmployeeRecord.class;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<EmployeeRecord, Object> EMPLOYEEID = createField(DSL.name("employeeId"), org.jooq.impl.SQLDataType.OTHER.defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.OTHER)), this, "");

    /**
     * The column <code>dbo.Employee.firstname</code>.
     */
    public final TableField<EmployeeRecord, String> FIRSTNAME = createField(DSL.name("firstname"), org.jooq.impl.SQLDataType.NVARCHAR(2147483647).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Employee.lastname</code>.
     */
    public final TableField<EmployeeRecord, String> LASTNAME = createField(DSL.name("lastname"), org.jooq.impl.SQLDataType.NVARCHAR(2147483647).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Employee.title</code>.
     */
    public final TableField<EmployeeRecord, String> TITLE = createField(DSL.name("title"), org.jooq.impl.SQLDataType.NVARCHAR(2147483647).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Employee.email</code>.
     */
    public final TableField<EmployeeRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.NVARCHAR(2147483647).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * The column <code>dbo.Employee.notes</code>.
     */
    public final TableField<EmployeeRecord, String> NOTES = createField(DSL.name("notes"), org.jooq.impl.SQLDataType.NVARCHAR(2147483647).defaultValue(org.jooq.impl.DSL.field("", org.jooq.impl.SQLDataType.NVARCHAR)), this, "");

    /**
     * Create a <code>dbo.Employee</code> table reference
     */
    public Employee() {
        this(DSL.name("Employee"), null);
    }

    /**
     * Create an aliased <code>dbo.Employee</code> table reference
     */
    public Employee(String alias) {
        this(DSL.name(alias), EMPLOYEE);
    }

    /**
     * Create an aliased <code>dbo.Employee</code> table reference
     */
    public Employee(Name alias) {
        this(alias, EMPLOYEE);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased) {
        this(alias, aliased, null);
    }

    private Employee(Name alias, Table<EmployeeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Employee(Table<O> child, ForeignKey<O, EmployeeRecord> key) {
        super(child, key, EMPLOYEE);
    }

    @Override
    public Schema getSchema() {
        return Dbo.DBO;
    }

    @Override
    public UniqueKey<EmployeeRecord> getPrimaryKey() {
        return Keys.PK_EMPLOYEE;
    }

    @Override
    public List<UniqueKey<EmployeeRecord>> getKeys() {
        return Arrays.<UniqueKey<EmployeeRecord>>asList(Keys.PK_EMPLOYEE);
    }

    @Override
    public Employee as(String alias) {
        return new Employee(DSL.name(alias), this);
    }

    @Override
    public Employee as(Name alias) {
        return new Employee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(String name) {
        return new Employee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Employee rename(Name name) {
        return new Employee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Object, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
