/*
 * This file is generated by jOOQ.
 */
package PharmacyDataAccess.tables.daos;


import PharmacyDataAccess.tables.Employee;
import PharmacyDataAccess.tables.records.EmployeeRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class EmployeeDao extends DAOImpl<EmployeeRecord, PharmacyDataAccess.tables.pojos.Employee, Object> {

    /**
     * Create a new EmployeeDao without any configuration
     */
    public EmployeeDao() {
        super(Employee.EMPLOYEE, PharmacyDataAccess.tables.pojos.Employee.class);
    }

    /**
     * Create a new EmployeeDao with an attached configuration
     */
    @Autowired
    public EmployeeDao(Configuration configuration) {
        super(Employee.EMPLOYEE, PharmacyDataAccess.tables.pojos.Employee.class, configuration);
    }

    @Override
    public Object getId(PharmacyDataAccess.tables.pojos.Employee object) {
        return object.getEmployeeid();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfEmployeeid(Object lowerInclusive, Object upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMPLOYEEID, lowerInclusive, upperInclusive);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByEmployeeid(Object... values) {
        return fetch(Employee.EMPLOYEE.EMPLOYEEID, values);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public PharmacyDataAccess.tables.pojos.Employee fetchOneByEmployeeid(Object value) {
        return fetchOne(Employee.EMPLOYEE.EMPLOYEEID, value);
    }

    /**
     * Fetch records that have <code>firstname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfFirstname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.FIRSTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>firstname IN (values)</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByFirstname(String... values) {
        return fetch(Employee.EMPLOYEE.FIRSTNAME, values);
    }

    /**
     * Fetch records that have <code>lastname BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfLastname(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.LASTNAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>lastname IN (values)</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByLastname(String... values) {
        return fetch(Employee.EMPLOYEE.LASTNAME, values);
    }

    /**
     * Fetch records that have <code>title BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfTitle(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.TITLE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>title IN (values)</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByTitle(String... values) {
        return fetch(Employee.EMPLOYEE.TITLE, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByEmail(String... values) {
        return fetch(Employee.EMPLOYEE.EMAIL, values);
    }

    /**
     * Fetch records that have <code>notes BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchRangeOfNotes(String lowerInclusive, String upperInclusive) {
        return fetchRange(Employee.EMPLOYEE.NOTES, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>notes IN (values)</code>
     */
    public List<PharmacyDataAccess.tables.pojos.Employee> fetchByNotes(String... values) {
        return fetch(Employee.EMPLOYEE.NOTES, values);
    }
}
