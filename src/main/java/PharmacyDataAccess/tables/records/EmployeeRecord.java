/*
 * This file is generated by jOOQ.
 */
package PharmacyDataAccess.tables.records;


import PharmacyDataAccess.tables.Employee;
import PharmacyDataAccess.tables.interfaces.IEmployee;

import javax.annotation.processing.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record6;
import org.jooq.Row6;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "Employee", schema = "dbo", uniqueConstraints = {
    @UniqueConstraint(name = "PK_Employee", columnNames = {"employeeId"})
})
public class EmployeeRecord extends UpdatableRecordImpl<EmployeeRecord> implements Record6<Object, String, String, String, String, String>, IEmployee {

    private static final long serialVersionUID = -2124525056;

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public void setEmployeeid(Object value) {
        set(0, value);
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Id
    @Column(name = "employeeId")
    @Override
    public Object getEmployeeid() {
        return get(0);
    }

    /**
     * Setter for <code>dbo.Employee.firstname</code>.
     */
    @Override
    public void setFirstname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>dbo.Employee.firstname</code>.
     */
    @Column(name = "firstname", length = 2147483647)
    @Override
    public String getFirstname() {
        return (String) get(1);
    }

    /**
     * Setter for <code>dbo.Employee.lastname</code>.
     */
    @Override
    public void setLastname(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>dbo.Employee.lastname</code>.
     */
    @Column(name = "lastname", length = 2147483647)
    @Override
    public String getLastname() {
        return (String) get(2);
    }

    /**
     * Setter for <code>dbo.Employee.title</code>.
     */
    @Override
    public void setTitle(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>dbo.Employee.title</code>.
     */
    @Column(name = "title", length = 2147483647)
    @Override
    public String getTitle() {
        return (String) get(3);
    }

    /**
     * Setter for <code>dbo.Employee.email</code>.
     */
    @Override
    public void setEmail(String value) {
        set(4, value);
    }

    /**
     * Getter for <code>dbo.Employee.email</code>.
     */
    @Column(name = "email", length = 2147483647)
    @Override
    public String getEmail() {
        return (String) get(4);
    }

    /**
     * Setter for <code>dbo.Employee.notes</code>.
     */
    @Override
    public void setNotes(String value) {
        set(5, value);
    }

    /**
     * Getter for <code>dbo.Employee.notes</code>.
     */
    @Column(name = "notes", length = 2147483647)
    @Override
    public String getNotes() {
        return (String) get(5);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Object> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record6 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row6<Object, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    @Override
    public Row6<Object, String, String, String, String, String> valuesRow() {
        return (Row6) super.valuesRow();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Field<Object> field1() {
        return Employee.EMPLOYEE.EMPLOYEEID;
    }

    @Override
    public Field<String> field2() {
        return Employee.EMPLOYEE.FIRSTNAME;
    }

    @Override
    public Field<String> field3() {
        return Employee.EMPLOYEE.LASTNAME;
    }

    @Override
    public Field<String> field4() {
        return Employee.EMPLOYEE.TITLE;
    }

    @Override
    public Field<String> field5() {
        return Employee.EMPLOYEE.EMAIL;
    }

    @Override
    public Field<String> field6() {
        return Employee.EMPLOYEE.NOTES;
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object component1() {
        return getEmployeeid();
    }

    @Override
    public String component2() {
        return getFirstname();
    }

    @Override
    public String component3() {
        return getLastname();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public String component5() {
        return getEmail();
    }

    @Override
    public String component6() {
        return getNotes();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public Object value1() {
        return getEmployeeid();
    }

    @Override
    public String value2() {
        return getFirstname();
    }

    @Override
    public String value3() {
        return getLastname();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public String value5() {
        return getEmail();
    }

    @Override
    public String value6() {
        return getNotes();
    }

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    @Override
    public EmployeeRecord value1(Object value) {
        setEmployeeid(value);
        return this;
    }

    @Override
    public EmployeeRecord value2(String value) {
        setFirstname(value);
        return this;
    }

    @Override
    public EmployeeRecord value3(String value) {
        setLastname(value);
        return this;
    }

    @Override
    public EmployeeRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public EmployeeRecord value5(String value) {
        setEmail(value);
        return this;
    }

    @Override
    public EmployeeRecord value6(String value) {
        setNotes(value);
        return this;
    }

    @Override
    public EmployeeRecord values(Object value1, String value2, String value3, String value4, String value5, String value6) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        return this;
    }

    // -------------------------------------------------------------------------
    // FROM and INTO
    // -------------------------------------------------------------------------

    @Override
    public void from(IEmployee from) {
        setEmployeeid(from.getEmployeeid());
        setFirstname(from.getFirstname());
        setLastname(from.getLastname());
        setTitle(from.getTitle());
        setEmail(from.getEmail());
        setNotes(from.getNotes());
    }

    @Override
    public <E extends IEmployee> E into(E into) {
        into.from(this);
        return into;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached EmployeeRecord
     */
    public EmployeeRecord() {
        super(Employee.EMPLOYEE);
    }

    /**
     * Create a detached, initialised EmployeeRecord
     */
    public EmployeeRecord(Object employeeid, String firstname, String lastname, String title, String email, String notes) {
        super(Employee.EMPLOYEE);

        set(0, employeeid);
        set(1, firstname);
        set(2, lastname);
        set(3, title);
        set(4, email);
        set(5, notes);
    }
}
